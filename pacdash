#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

readonly APP_NAME="${0##*/}"
readonly APP_VERSION="0.0.1"
readonly APP_AUTHOR="sheepla (https://github.com/sheepla)"

readonly EXITCODE_OK="0"
readonly EXITCODE_ERR_ARGS="1"
readonly EXITCODE_ERR_COMMAND="2"

readonly COLOR_FG_RED='\033[31;1m'
readonly COLOR_FG_WHITE='\033[1m'
readonly COLOR_FG_CYAN='\033[36;1m'
readonly COLOR_FG_BLACK='\033[30;1m'
readonly COLOR_NORMAL='\033[m'

function Usage() {
  echo -e "\
${APP_NAME} -- show pacman summary

${COLOR_FG_WHITE}USAGE${COLOR_NORMAL}
  ${APP_NAME}
  ${APP_NAME} [-h|--help]
  ${APP_NAME} [-V|--version]

${COLOR_FG_WHITE}OPTIONS${COLOR_NORMAL}
  -h, --help    show help message then exit
  -V, --version show version then exit

${COLOR_FG_WHITE}AUTHOR${COLOR_NORMAL}
  ${APP_AUTHOR}
" >&2
}

function Main() {
  if ! Has "pacman"; then
    Err "pacman command not found."
    return "${EXITCODE_ERR_COMMAND}"
  fi

  for arg in "${@}"; do
    case "${arg}" in
    -h | --help)
      Usage
      return "${EXITCODE_OK}"
      ;;
    -v | -V | --version)
      echo -e "${APP_NAME} -- v${APP_VERSION}"
      return "${EXITCODE_OK}"
      ;;
    *)
      Err "Invalid argument ${arg}"
      return "${EXITCODE_ERR_ARGS}"
      ;;
    esac
  done

  paste -d "" <(ShowLogo) <(
    ShowInfo
    ShowColorBar
  )

  return "${EXITCODE_OK}"
}

function ShowLogo() {
  echo -e "\
                                          
                 ${COLOR_FG_BLACK}^~!!~^${COLOR_NORMAL}                   
             ${COLOR_FG_BLACK}^!!!!!!!!!!~${COLOR_NORMAL}                 
          ${COLOR_FG_BLACK}^~!!!!!!!!${COLOR_FG_CYAN}A${COLOR_FG_BLACK}!!!!!!!!^^${COLOR_NORMAL}           
      ${COLOR_FG_BLACK}^~!!!!!!!!!!!${COLOR_FG_CYAN}?J7${COLOR_FG_BLACK}!!!!!!!!!!~^${COLOR_NORMAL}        
  ${COLOR_FG_BLACK}^~!!!!!!!!!!!!!!${COLOR_FG_CYAN}7##J${COLOR_FG_BLACK}!!!!!!!!!!!!!!~^${COLOR_NORMAL}    
  ${COLOR_FG_BLACK}~!!!!!!!!!!!!!!!${COLOR_FG_CYAN}7B&&#J${COLOR_FG_BLACK}!!!!!!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!!!!!!${COLOR_FG_CYAN}75#&&&#J~${COLOR_FG_BLACK}!!!!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!!!!!${COLOR_FG_CYAN}?G#B#&&&#Y${COLOR_FG_BLACK}!!!!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!!!~${COLOR_FG_CYAN}?B&&&&&&&&#5${COLOR_FG_BLACK}!!!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!!~${COLOR_FG_CYAN}J#&&&&BB#&&&#P${COLOR_FG_BLACK}!!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!!${COLOR_FG_CYAN}5#&&&#?${COLOR_FG_BLACK}!!${COLOR_FG_CYAN}7G&&&&G${COLOR_FG_BLACK}!!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!!!${COLOR_FG_CYAN}P#&&&&P${COLOR_FG_BLACK}!!!~${COLOR_FG_CYAN}Y#&&#BP${COLOR_FG_BLACK}!!!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!!${COLOR_FG_CYAN}7G&&#BFGJ${COLOR_FG_BLACK}!!!!${COLOR_FG_CYAN}?PBB#&#G7${COLOR_FG_BLACK}!!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}~!!!!!!${COLOR_FG_CYAN}7GBPY?${COLOR_FG_BLACK}!!!!!!!!!!!!${COLOR_FG_CYAN}7J5BBJ${COLOR_FG_BLACK}!!!!!!!${COLOR_NORMAL}  
  ${COLOR_FG_BLACK}^!!!!!!${COLOR_FG_CYAN}?7${COLOR_FG_BLACK}!!!!!!!!!!!!!!!!!!!!${COLOR_FG_CYAN}7?7${COLOR_FG_BLACK}!!!!!~${COLOR_NORMAL}  
    ${COLOR_FG_BLACK}^~!!!!!!!!!!!!!!!!!!!!!!!!!!!!~^${COLOR_NORMAL}      
        ${COLOR_FG_BLACK}^~!!!!!!!!!!!!!!!!!!!!~^${COLOR_NORMAL}          
            ${COLOR_FG_BLACK}^~!!!!!!!!!!!!~~${COLOR_NORMAL}              
               ${COLOR_FG_BLACK}^^~!!!!!~^${COLOR_NORMAL}                 
                   ${COLOR_FG_BLACK}^^${COLOR_NORMAL}                     
"
}

function Has() {
  command -v "${1}" &>/dev/null
}

function Err() {
  printf "[ ${COLOR_FG_RED}ERR${COLOR_NORMAL} ] %s\n" "${1}"
}

function Pacman() {
  LANG=C pacman "${@}"
}

function CountPkgs() {
  Pacman -Qq | wc -l
}

function CountPkgsExplict() {
  Pacman -Qeq | wc -l
}

function CountPkgsExplictNative() {
  Pacman -Qeqn | wc -l
}

function CountPkgsUpgradable() {
  Pacman -Quq | wc -l
}

function ShowLargePkgs() {
  Pacman -Qeq | Pacman -Qi - |
    awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' |
    sort --human-numeric-sort --reverse |
    head -n 5 |
    column -t |
    sed 's/^/    /g'
}

function ShowUpgradablePkgs() {
  Pacman -Qu | head -n 5 | sed 's/^/    /g'
}

function ShowInfo() {
  printf "\n${COLOR_FG_CYAN}%s${COLOR_NORMAL}@${COLOR_FG_CYAN}%s${COLOR_NORMAL}\n" "$(whoami)" "$(hostname)"
  printf "${COLOR_FG_BLACK}%s${COLOR_NORMAL}\n" "---------------------------------------------------"
  printf "${COLOR_FG_CYAN}all installed packages: ${COLOR_NORMAL}${COLOR_FG_WHITE}%s${COLOR_NORMAL}\n" "$(CountPkgs)"
  printf "${COLOR_FG_CYAN}explictly installed packages: ${COLOR_NORMAL}${COLOR_FG_WHITE}%s${COLOR_NORMAL}\n" "$(CountPkgsExplict)"
  printf "${COLOR_FG_CYAN}explictly installed packages (native): ${COLOR_NORMAL}${COLOR_FG_WHITE}%s${COLOR_NORMAL}\n" "$(CountPkgsExplictNative)"
  printf "${COLOR_FG_CYAN}large packages:${COLOR_FG_BLACK}\n%s\n" "$(ShowLargePkgs)"
  printf "\n"
  printf "${COLOR_FG_WHITE}%s ${COLOR_FG_CYAN}updates available:${COLOR_FG_BLACK}\n%s\n%s\n" "$(CountPkgsUpgradable)" "$(ShowUpgradablePkgs)"
}

function ShowColorBar() {
  printf "\n"
  for color in {0..7}; do
    printf " \033[4${color};1m%s\033[m" "    "
  done
  printf "\n"
}

Main "${@}"
exit "${?}"
